{"version":3,"sources":["webpack://charts/./components/utils.js","webpack://charts/./components/parts/settingsPanel.js"],"names":["generateCsvString","data","csvRows","headers","Object","keys","push","join","row","values","map","header","escaped","replace","visible","columns","useMonitor","state","dispatch","settings","title","placement","closable","width","onClose","type","payload","footer","onClick","csvName","csvData","blob","Blob","window","navigator","msSaveOrOpenBlob","blobURL","URL","createObjectURL","link","document","createElement","setAttribute","innerHTML","body","appendChild","click","downloadCSV","disabled","sx","bg","color","icon","DownloadOutlined","span","spinning","tip","column","toUpperCase","substring","dataIndex","toLowerCase","dataSource","bordered","size","pagination","defaultPageSize"],"mappings":"yIACaA,EAAoB,SAAAC,GAC/B,UAAMC,EAAU,GAGVC,EAAUC,OAAOC,KAAKJ,EAAK,IACjCC,EAAQI,KAAKH,EAAQI,KAAK,MALa,2BAQvC,IARuC,iBAQ5BC,EAR4B,QAS/BC,EAASN,EAAQO,KAAI,SAAAC,GACzB,IAAMC,GAAW,GAAKJ,EAAIG,IAASE,QAAQ,KAAM,OACjD,iBAAWD,EAAX,QAEFV,EAAQI,KAAKG,EAAOF,KAAK,OAL3B,EAAkBN,EAAlB,+CAAwB,IARe,kFAiBvC,OAAOC,EAAQK,KAAK,O,0HCGP,sBAAiB,EAAdO,QAAc,IAUtBC,EAVsB,EACJC,cADI,mBACvBC,EADuB,KAChBC,EADgB,KAEtBC,EAAmBF,EAAnBE,SAAUlB,EAASgB,EAAThB,KAgBlB,OACE,cAAC,IAAD,CACEmB,MAAM,WACNC,UAAU,QACVC,UAAU,EACVC,MAAM,OACNC,QApBY,kBACdN,EAAS,CAAEO,KAAM,0BAA2BC,SAAS,KAoBnDZ,QAASK,EAASL,QAClBa,OACE,cAAC,IAAD,CAAQC,QApBG,kBDPZ,SAAqB3B,GAAyB,IAAnB4B,EAAmB,uDAAT,QACpCC,EAAU9B,EAAkBC,GAC9B8B,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAEL,KAAM,aACnCQ,OAAOC,WAAaD,OAAOC,UAAUC,kBAEvCF,OAAOC,UAAUC,iBAAiBL,EAASD,GAE7C,IAAIO,EAAUH,OAAOI,IAAIC,gBAAgBP,GACrCQ,EAAOC,SAASC,cAAc,KAClCF,EAAKG,aAAa,OAAQN,GAC1BG,EAAKG,aAAa,WAAYb,EAAU,QACxCU,EAAKG,aAAa,WAAY,KAC9BH,EAAKI,UAAY,GACjBH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QCPkBC,CAAY9C,EAAM,gBAoBR+C,UAAW/C,EAAK,GAAIgD,GAAI,CAACC,GAAI,UAAWC,MAAO,QAASC,KAAM,cAACC,EAAA,EAAD,OAAzF,aAKF,cAAC,IAAD,KACE,cAAC,IAAD,CAAKC,KAAM,IACP,cAAC,IAAD,CAAMC,UAAWtD,EAAK,GAAIuD,IAAI,gBAC1BvD,EAAK,IAzBXc,EAAUX,OAAOC,KAAKJ,EAAK,IAAIS,KAAI,SAAA+C,GAAM,MAAK,CAClDrC,MAAO,GAAF,OAAKqC,EAAO,GAAGC,eAAf,OAA+BD,EAAOE,UAAU,IACrDC,UAAW,GAAF,OAAKH,EAAOI,mBAGhB,cAAC,IAAD,CAAOC,WAAY7D,EAAMc,QAASA,EAASgD,UAAQ,EAACC,KAAK,QAAQC,WAAY,CAACC,gBAAiB,OAoBhF","file":"SettingsPanel.bba6d3e70ba64c9f16ca.bundle.js","sourcesContent":["\r\nexport const generateCsvString = data => {\r\n  const csvRows = []\r\n\r\n  // create csv headers\r\n  const headers = Object.keys(data[0])\r\n  csvRows.push(headers.join(','))\r\n\r\n  // loop over the rows\r\n  for (const row of data) {\r\n    const values = headers.map(header => {\r\n      const escaped = ('' + row[header]).replace(/\"/g, '\\\\\"')\r\n      return `\"${escaped}\"`\r\n    })\r\n    csvRows.push(values.join(','))\r\n  }\r\n\r\n  // return the correct data\r\n  return csvRows.join('\\n')\r\n}\r\n\r\nexport function downloadCSV(data, csvName = 'Table') {\r\n  const csvData = generateCsvString(data)\r\n  var blob = new Blob([csvData], { type: 'text/csv' })\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    // for IE\r\n    window.navigator.msSaveOrOpenBlob(csvData, csvName)\r\n  }\r\n  var blobURL = window.URL.createObjectURL(blob)\r\n  var link = document.createElement('a')\r\n  link.setAttribute('href', blobURL)\r\n  link.setAttribute('download', csvName + '.csv')\r\n  link.setAttribute('tabindex', '0')\r\n  link.innerHTML = ''\r\n  document.body.appendChild(link)\r\n  link.click()\r\n}\r\n\r\n\r\n","/** @jsx jsx */\r\nimport React from 'react'\r\nimport { DownloadOutlined } from '@ant-design/icons'\r\nimport { downloadCSV } from '../utils'\r\nimport { useMonitor } from '../api/MonitorState'\r\n// import Form from './settingsForm'\r\nimport {jsx} from 'theme-ui'\r\n\r\nimport Button from 'antd/es/button'\r\nimport 'antd/es/button/style'\r\nimport Drawer from 'antd/es/drawer'\r\nimport 'antd/es/drawer/style'\r\nimport Table from 'antd/es/table'\r\nimport 'antd/es/table/style'\r\nimport Spin from 'antd/es/spin'\r\nimport 'antd/es/spin/style'\r\nimport Row from 'antd/es/row'\r\nimport 'antd/es/row/style'\r\nimport Col from 'antd/es/col'\r\nimport 'antd/es/col/style'\r\n\r\nexport default ({ visible }) => {\r\n  const [state, dispatch] = useMonitor()\r\n  const { settings, data } = state\r\n\r\n  const onClose = () =>\r\n    dispatch({ type: 'SET_SETTINGS_VISIBILITY', payload: false })\r\n\r\n  const download = () => downloadCSV(data, 'monitorData')\r\n\r\n  const createTable = () => {\r\n    const columns = Object.keys(data[0]).map(column => ({\r\n      title: `${column[0].toUpperCase()}${column.substring(1)}`,\r\n      dataIndex: `${column.toLowerCase()}`,\r\n    }))\r\n\r\n    return <Table dataSource={data} columns={columns} bordered size=\"small\" pagination={{defaultPageSize: 20}}/>\r\n  }\r\n\r\n  return (\r\n    <Drawer\r\n      title=\"Settings\"\r\n      placement=\"right\"\r\n      closable={true}\r\n      width=\"80vw\"\r\n      onClose={onClose}\r\n      visible={settings.visible}\r\n      footer={\r\n        <Button onClick={download} disabled={!data[0]} sx={{bg: 'primary', color: 'text'}} icon={<DownloadOutlined />}>\r\n          Download\r\n        </Button>\r\n      }\r\n    >\r\n      <Row>\r\n        <Col span={18}>\r\n            <Spin spinning={!data[0]} tip=\"Loading data\" >\r\n              {!data[0] ? [] : createTable()}\r\n            </Spin>\r\n        </Col>\r\n      </Row>\r\n    </Drawer>\r\n  )\r\n}\r\n"],"sourceRoot":""}